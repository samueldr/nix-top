#!/usr/bin/env ruby

require "shellwords"
require "optparse"
require "io/wait"

DEFAULTS = {
  delay: 0.5,
  once: false,
}.freeze

options = DEFAULTS.dup

OptionParser.new do |opts|
  opts.banner = "Usage: nix-top [options]"

  opts.on("-d", "--delay [seconds]", Numeric, "In seconds (default: #{DEFAULTS[:delay]})") do |v|
    options[:delay] = v
  end
  opts.on("-1", "--once", "Only run once (generates one screen)") do |v|
    options[:once] = v;
  end
end.parse!

VT_CLEAR_LINE=`tput el`
VT_CLEAR_REST=`tput ed`
VT_HOME=`tput cup 0 0`

def stty(*flags)
  `#{["stty", *flags].shelljoin}`
end

# Returns [width, height] of the terminal.
def size
  `echo 'cols\nlines' | tput -S`.strip.split("\n").map(&:to_i)
end

def build_users
  `getent group nixbld`.strip.split(":").last.split(",")
end

def active_build_users()
  build_users.select do |name|
    `pgrep -fu #{name.shellescape}`
    $? == 0
  end
end

# Returns a mostly correct snapshot of the PIDs for processes building
# things, in a Hash indexed by build user.
def get_processes()
  active_build_users.map do |user|
    pids = `pgrep -u #{user.shellescape}`
        .strip.split("\n")
        .map(&:to_i)
        .sort
    path = get_out_path(user, pids.first)

    [
      user,
      [path, pids]
    ]
  end
end

# Gets either the out path, or an approximation, depending whether
# or not it can peek into processes.
def get_out_path(user, pid)
  begin
  # whew!
  build_dir = `find -L /tmp -maxdepth 1 -user #{user.shellescape} -exec stat --printf '%Z:%n\\n' '{}' ';' | sort -n`
    .strip
    .split("\n")
    .last
    .split(":")
    .last
  rescue
    "(unknown)"
  end
  begin
    file = "#{build_dir}/env-vars"
    # This can fail if the process disappears while trying to read.
    # This is why we rescue everything
    # (This also could fail due to missing `out=` and we get free rescue)
    File.read(file)                          # Reads process' environment
      .split("\n")                           # (which is a null-delimited list)
      .grep(/^declare -x out=/)              # Keep out paths
      .first                                 # Keep the only result
      .split("\"").last                      # Keep only the value
  rescue
    build_dir
  end
end

def per_output_infos(user, pids, path)
  [
    ":: (%s) → %s" % [user, path],
    `ps -o uid,pid,ppid,stime,time,command -U "#{user.shellescape}"`
  ]
end

# takes pid of root process run by a nixbld user (usually a default-builder.sh process)
# returns pid of user that asked the nix-daemon to build this derivation
def get_owner(runner_pid)
  # First, get the PPID of the given PID
  ppid = `ps -o ppid= -p #{runner_pid} 2>/dev/null`.strip.to_i
  if ppid == 0
    [0, "unknown", "unknown"]
  end

  # Now, use the PPID to get the parent process's command
  parent_command = `ps -o command= -p #{ppid} 2>/dev/null`.strip.split(" ")
  if parent_command.length < 2
    [ppid, "unknown", "unknown"]
  end

  # The PID of the owner is the first arguemnt of the command
  owner_pid = parent_command[1].to_i
  if owner_pid == 0
    [ppid, "unknown", "unknown"]
  end

  # Query owner data
  owner_user = `ps -o user= -p #{owner_pid} 2>/dev/null`.strip
  owner_command = `ps -o command= -p #{owner_pid} 2>/dev/null`.strip

  [owner_pid, owner_user, owner_command]
end

def processes_extend_owners(processes)
  processes = processes.map do |user, (path, pids)| 
    main_pid = pids.sort do |a, b| a <=> b end.first
    owner = get_owner(main_pid)
    [ user, [path, pids, owner] ]
  end

  processes
end

# A "screenful" of information
# Does not trim output to fit in one terminal screen.
def print_screen()
  processes = get_processes()
  processes = processes_extend_owners(processes) 

  lines = []
  sep = [
    "",
    " * * * ",
    "",
  ]
  
  lines << "Summary:"
  lines << "  %8s  %8s  %s → %s" % ["owner", "pid", "nr_processes", "derivation"]
  lines.concat(processes.map do |user, (path, pids, (owner_pid, owner_user, owner_command))|
    "  %8s  %8i  %4d → %s" % [owner_user, owner_pid, pids.length, path]
  end)
  lines.concat(sep)
  lines.concat(processes.map do |user, (path, pids)|
    per_output_infos(user, pids, path)
  end)

  # This is hacky and round-about...
  # but the consumers will assume this gives *lines*.
  # I don't want to ensure everything is already a line.
  # So, uh, joining everything and re-splitting is done for now.
  # TODO : better API for writing a screen.
  lines.flatten.join("\n").split("\n")
end

# Trims the "screenful" to fit into the screen.
def display(screen)
  width, height = size
  screen = screen[0...height].map do |line|
    line[0...width] + VT_CLEAR_LINE
  end.join("\n").strip

  print VT_HOME + screen + VT_CLEAR_REST
end

# ------------------------------------------------------------------------------

# Ensures no backtrace on ^C
Signal.trap("INT") do
  exit
end

at_exit {
  stty($saved_stty)
  puts ""
  exit
}
$saved_stty = stty("-g").strip
stty("-echo", "-icanon")

display(print_screen)

exit if options[:once]

while true do
  if $stdin.wait_readable(options[:delay]) then
    exit if $stdin.readpartial(4096).include? "q"
  end

  display(print_screen)
end


